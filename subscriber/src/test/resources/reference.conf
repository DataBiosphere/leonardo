application {
  service-account-file = "fake-sa"
  google-project = "fake-project"
}

mysql {
  profile = "slick.jdbc.MySQLProfile$"
  batchSize = 5000
  host = "localhost"
  port = 3311
  db {
    driver = "com.mysql.cj.jdbc.Driver"
    url = "jdbc:mysql://"${mysql.host}":"${mysql.port}"/leotestdb?createDatabaseIfNotExist=true&useSSL=false&rewriteBatchedStatements=true&nullNamePatternMatchesAll=true"
    user = "leonardo-test"
    password = "leonardo-test"
    connectionTimeout = "5 seconds"  // default of 1 sec sometimes too short for docker local mysql
  }
  concurrency = 20
}

auth-provider-config {
  sam-uri = "https://sam.com"
}

non-leonardo-message-subscriber {
  topic-name = {
    topic = "fake-leo-topic"
  }
  subscription-name {
    subscription-name = "fake-subscription"
  }
}

gke {
  galaxy-app {
    # Templated by firecloud-develop
    orch-url = "https://firecloud-orchestration.dsde-dev.broadinstitute.org/api/"
    drs-url = "https://us-central1-broad-dsde-dev.cloudfunctions.net/martha_v3"
  }
}

proxy {
  # Should match the proxy wildcard cert
  proxy-domain = ".jupyter.firecloud.org"
  proxy-url-base = "https://leo/proxy/"
}

dns-cache {
  kubernetes {
    cache-expiry-time = 5 seconds
    cache-max-size = 10000
  }
}

security-files {
  proxy-server-crt = "http/src/test/resources/test-server.crt"
  proxy-server-key = "http/src/test/resources/test-server.key"
  proxy-root-ca-pem = "http/src/test/resources/test-server-pem"
  proxy-root-ca-key = "http/src/test/resources/test-server.key"
  rstudio-license-file = "http/src/test/resources/rstudio-license-file.lic"
}

monitor {
  kubernetes {
    create-nodepool {
      max-attempts = 90 # 10 seconds * 90 is 15 min
      interval = 10 seconds
    }
    delete-nodepool {
      max-attempts = 90 # 10 seconds * 90 is 15 min
      interval = 10 seconds
    }
    create-cluster {
      max-attempts = 120 # 15 seconds * 120 is 30 min
      interval = 15 seconds
    }
    delete-cluster {
      max-attempts = 120 # 15 seconds * 120 is 30 min
      interval = 15 seconds
    }
    create-ingress {
      max-attempts = 100 # 3 seconds * 100 is 5 min
      interval = 3 seconds
    }
    create-app {
      interval = 10 seconds
      max-attempts = 120 # 10 seconds * 120 = 20 min
    }
    delete-app {
      interval = 10 seconds
      max-attempts = 120 # 10 seconds * 120 = 20 min
    }
    scale-nodepool {
      max-attempts = 90 # 10 seconds * 90 is 15 min
      interval = 10 seconds
    }
    set-nodepool-autoscaling {
      max-attempts = 90 # 10 seconds * 90 is 15 min
      interval = 10 seconds
    }
    start-app {
      max-attempts = 100 # 3 seconds * 100 is 5 min
      interval = 3 seconds
    }
  }
}
# Example config file for leonardo.
# Anything commented out here will have have defaults specified or is not necessary to run leo.
# All values can be modified for your specific google environment, database, and security certificates


# Google Cloud dataproc configuration
dataproc {
  #applicationName = "leonardo"
  dataprocDefaultRegion = "YOUR_REGION"  # the google region for your dataproc
  leoGoogleProject = "GOOGLE_PROJECT"    # the name of the google project to use during cluster startup
                                         # *this is not the project the cluster will be created in
  clusterUrlBase = "https://YOUR_DOMAIN/notebookes" # the base url to access your cluster
  #jupyterServerName = "jupyter-server"
}

# Keys and certificate authorities for cluster
clusterFiles {
  configFolderPath = "/etc/"
  jupyterServerCrt = "jupyter-server.crt"
  jupyterServerKey = "jupyter-server.key"
  jupyterRootCaPem = "rootCA.pem"
  jupyterRootCaKey = "rootCA.key"
}

# These are the cluster defaults that have already been configured.
# You should only set them in your config if you want a different value
#clusterDefaults {
  #numberOfWorkers = 0            # Can't be 1, must be greater than or equal to numberOfPreemptibleWorkers
  #masterMachineType = "n1-standard-4"
  #masterDiskSize = 500           # Minimum is 100
  #workerMachineType = "n1-standard-4"
  #workerDiskSize = 500           # Minimum is 100
  #numberOfWorkerLocalSSDs = 0    # Can't be 1
  #numberOfPreemptibleWorkers = 0 # Can't be 1
#}

# Database connection information
mysql {
  db {
    url = "jdbc:mysql://YOUR_DB_HOST/leonardo?requireSSL=true&useSSL=true&rewriteBatchedStatements=true&nullNamePatternMatchesAll=true"
    user = "USER_NAME"
    password = "PASSWORD"
  }
}

# Jupyter proxy server configuration
proxy {
  # Should match the jupyter wildcard cert
  jupyterDomain = ".jupyter.DOMAIN_NAME"
}

# To use the swagger page, supply a service account id and realm
#swagger {
  #googleClientId = ""
  #realm = ""
#}

akka {
  loglevel = INFO
  http {
    server.idle-timeout = 1 h
    client.idle-timeout = 1 h
    server.request-timeout = 60 s
  }

  #Add your ssl config info below
  ssl-config {
    keyManager = {
      stores = [
        {
          type = "TYPE"
          path = "PATH"
          password = "PASSWORD"
        }
      ]
    }
    trustManager = {
      stores = [
        {
          type = "PEM"
          path = "/etc/rootCA.pem"
        },
        {
          # Default trust store
          path: ${java.home}/lib/security/cacerts
          password = "PASSWORD"
        }
      ]
    }
  }
}

# Authorization implementation config
auth {
  # Subclass org.broadinstitute.dsde.workbench.leonardo.model.LeoAuthProvider and provide the class name here
  providerClass = ""
  providerConfig = { # Do not remove providerConfig, even if empty
    # Any provider specific config should be specified here
  }

  # Temporarily, you can provide a list of user emails that will be allowed access
  whitelistProviderConfig = {
    whitelist = [EMAIL1,EMAIL2]
  }
}

# Implement and specify a class that will provide appropriate service accounts
serviceAccounts {
  # To implement your own service account provisioning, subclass org.broadinstitute.dsde.workbench.leonardo.model.ServiceAccountProvider
  # and specify your concrete class here
  providerClass = ""
  config { # Do not remove config, even if empty
    # Specify any config information your class needs here
  }
}

# Example config file for leonardo.
# Anything commented out here will have have defaults specified or is not necessary to run leo.
# All values can be modified for your specific google environment, database, and security certificates


# Google Cloud dataproc configuration
dataproc {
  #applicationName = "leonardo"
  dataprocDefaultRegion = "YOUR_REGION"  # the google region for your dataproc
  leoGoogleProject = "GOOGLE_PROJECT"    # the name of the google project to use during cluster startup
                                         # *this is not the project the cluster will be created in
  clusterUrlBase = "https://YOUR_DOMAIN/notebookes" # the base url to access your cluster
  #jupyterServerName = "jupyter-server"
}

# These are the cluster defaults that have already been configured.
# You should only set them in your config if you want a different value
#clusterDefaults {
  #numberOfWorkers = 0            # Standard, non-preemptible workers; Can't be 1
  #masterMachineType = "n1-standard-4"
  #masterDiskSize = 500           # Minimum is 100
  #workerMachineType = "n1-standard-4"
  #workerDiskSize = 500           # Minimum is 100
  #numberOfWorkerLocalSSDs = 0    # Can be 0-8
  #numberOfPreemptibleWorkers = 0 # Can't be 1; Can only be > 1 when Number of workers is > 1
#}

# Database connection information
mysql {
  db {
    url = "jdbc:mysql://YOUR_DB_HOST/leonardo?requireSSL=true&useSSL=true&rewriteBatchedStatements=true&nullNamePatternMatchesAll=true"
    user = "USER_NAME"
    password = "PASSWORD"
  }
}

# To use the swagger page, supply a service account id and realm
#swagger {
  #googleClientId = ""
  #realm = ""
#}

# Secure, 2-way communication between leo and jupyter
# Each section below will show the commands to generate the necessary files
# You can use different filenames, just replace the name in the config examples below with your chosen name

# Generate a root CA key and pem file: rootCA.key, rootCA.pem
# openssl genrsa -out rootCA.key 2048 -des3
# openssl req -x509 -new -nodes -key rootCA.key -days 1024 -out rootCA.pem -sha256

# Generate a server key and certificate: jupyter-server.key, jupyter-server.crt
# The domain name you use in creating the key req should be used in the config below at JUPYTER_DOMAIN_NAME
#openssl genrsa -out jupyter-server.key 2048
#openssl req -new -key jupyter-server.key -out jupyter-server.csr -sha256
#openssl x509 -req -in jupyter-server.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out jupyter-server.crt -days 1500

# Generate leonardo client key and certificate: leo-client.key, leo-client.crt"
# Common name used in examples below is leonardo-client
#openssl genrsa -out leo-client.key 2048
#openssl req -new -key leo-client.key -out leo-client.csr -sha256
#openssl x509 -req -in leo-client.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out leo-client.crt -days 1500

# Generate the keystore: leo-client.p12
# Remember the password you use: PW_KEYSTORE
#openssl pkcs12 -export -inkey leo-client.key -in leo-client.crt -out leo-client.p12


# Jupyter proxy server configuration
proxy {
  # Should match the jupyter wildcard cert specified in command above
  jupyterDomain = "JUPYTER_DOMAIN_NAME"
}

# Keys and certificate authorities for cluster
clusterFiles {
  configFolderPath = "/etc/"
  jupyterServerCrt = "jupyter-server.crt"
  jupyterServerKey = "jupyter-server.key"
  jupyterRootCaPem = "rootCA.pem"
  jupyterRootCaKey = "rootCA.key"
}


akka {
  loglevel = INFO
  http {
    server.idle-timeout = 1 h
    client.idle-timeout = 1 h
    server.request-timeout = 60 s
  }

  #Add your ssl config info below
  ssl-config {
    # Key store with private key for leo? cluster?
    keyManager = {
      stores = [
        {
          type = "PKCS12"
          path = "/etc/leo-client.p12"
          password = "PW_KEYSTORE"
        }
      ]
    }
    # Certificate store that recognizes the client certificate
    trustManager = {
      stores = [
        {
          type = "PEM"
          path = "/etc/rootCA.pem"
        },
        {
          # Default trust store - no need to modify
          path: ${java.home}/lib/security/cacerts
          password = "changeit"
        }
      ]
    }
  }
}

# Authorization implementation config
auth {
  # To use your own provider implementation, subclass org.broadinstitute.dsde.workbench.leonardo.model.LeoAuthProvider and provide the class name here
  providerClass = "org.broadinstitute.dsde.workbench.leonardo.auth.WhitelistAuthProvider"  # A default auth provider
  providerConfig = { # Do not remove providerConfig, even if empty
    # Any provider specific config should be specified here
    # For the whitelist provider, specify a comma separated list of user emails that should be allowed access
    whitelist = [EMAIL1,EMAIL2]
  }

}

# Implement and specify a class that will provide appropriate service accounts
serviceAccounts {
  # To implement your own service account provisioning, subclass org.broadinstitute.dsde.workbench.leonardo.model.ServiceAccountProvider
  # and specify your concrete class here
  providerClass = ""
  config { # Do not remove config, even if empty
    # Specify any config information your class needs here
  }
}

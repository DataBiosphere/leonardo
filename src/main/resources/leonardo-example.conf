
# Google Cloud dataproc configuration
dataproc {
  applicationName = "leonardo"
  dataprocDefaultRegion = "us-central1"
  leoGoogleProject = ""
  clusterUrlBase = "https://leonardo.dsde-dev.broadinstitute.org/notebooks/"
  jupyterServerName = "jupyter-server"
}

# Keys and certificate authorities for cluster
clusterFiles {
  configFolderPath = "/etc/"
  jupyterServerCrt = "jupyter-server.crt"
  jupyterServerKey = "jupyter-server.key"
  jupyterRootCaPem = "rootCA.pem"
  jupyterRootCaKey = "rootCA.key"
}

# These are the cluster defaults that have already been configured.
# You should only set them in your config if you want a different value
#clusterDefaults {
  #numberOfWorkers = 0
  #masterMachineType = "n1-standard-4"
  #masterDiskSize = 500
  #workerMachineType = "n1-standard-4"
  #workerDiskSize = 500
  #numberOfWorkerLocalSSDs = 0
  #numberOfPreemptibleWorkers = 0
#}

# Database connection information
mysql {
  profile = "slick.jdbc.MySQLProfile$"
  batchSize = 2000
  db {
    driver = "com.mysql.cj.jdbc.Driver"
    url = "jdbc:mysql://<host>/leonardo?requireSSL=true&useSSL=true&rewriteBatchedStatements=true&nullNamePatternMatchesAll=true"
    user = "<user>"
    password = "<password>"
    connectionTimeout = 5000
    numThreads = 50
  }
}

proxy {
  # Should match the jupyter wildcard cert
  jupyterDomain = ".jupyter.firecloud.org"
}

# To use the swagger page, supply a service account id and realm
swagger {
  googleClientId = ""
  realm = ""
}

akka {
  # The log level has this default
  #loglevel = INFO
  #http {
    #server.idle-timeout = 180 s
    #server.request-timeout=60 s
    #client.idle-timeout = 1h
  #}

  #Add you ssl config info below
  ssl-config {
    keyManager = {
      stores = [
        {
          type = ""
          path = ""
          password = "<password>"
        }
      ]
    }
    trustManager = {
      stores = [
        {
          type = "PEM"
          path = "/etc/rootCA.pem"
        },
        {
          # Default trust store
          path: ${java.home}/lib/security/cacerts
          password = "<password>"
        }
      ]
    }
  }
}

# Authorization implementation config
auth {
  # Subclass LeoAuthProvider and provide the class name here
  providerClass = ""
  providerConfig = {
    # Any provider specific config can be specified here
  }
}

# Implement and specify a class that will provide appropriate service accounts
serviceAccounts {
  # To implement your own service account provisioning, subclass org.broadinstitute.dsde.workbench.leonardo.model.ServiceAccountProvider
  # and specify your concrete class here
  providerClass = ""
  config {
    # Specify any config information your class needs here
  }
}

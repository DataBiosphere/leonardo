application {
  leoGoogleProject = ${?GOOGLE_PROJECT}
  leoServiceAccountJsonFile = "/etc/leonardo-account.json"
  leoServiceAccountJsonFile = ${?LEO_SA_JSON_PATH}
  leoServiceAccountEmail = ${?LEO_SVC_ACCT_EMAIL}
  leoUrlBase = ${?LEO_URL_BASE}
}

groups {
  subEmail = ${?GROUP_SUB_EMAIL}
  dataprocImageProjectGroupName = "dataproc-image-project-group"
  dataprocImageProjectGroupEmail = ${?DATAPROC_IMAGE_PROJECT_GROUP}
}

gce {
  runtimeDefaults {
    zone = ${?DEFAULT_ZONE}
  }
}

gke {
  galaxyApp {
    postgres.password = ${?GALAXY_POSTGRES_PASSWORD}
    orchUrl = ${?ORCH_URL}
    drsUrl = ${?DRS_URL}
  }
  rstudioApp {
    enabled = ${?RSTUDIO_APP_ENABLED}
  }
}

pubsub {
  pubsubGoogleProject =  ${?GOOGLE_PROJECT}
  topicName = ${?TOPIC_NAME}

  non-leo-message-subscriber {
    subscription-name = ${?NON_LEO_SUBSCRIPTION_NAME}
  }
}

mysql {
  profile = "slick.jdbc.MySQLProfile$"
  batchSize = 2000
  db {
    # Changes to mysql.db.driver value must also be reflected in liquibase.properties
    driver = "com.mysql.cj.jdbc.Driver"
    # Changes to mysql.db.url value must also be reflected in liquibase.properties
    url = ${?SQL_URL}
    user = ${?DB_USER}
    password = ${?DB_PASSWORD}
    connectionTimeout = 5000
    numThreads = ${?NUM_DB_THREADS}
  }
}

proxy {
  # Should match the jupyter wildcard cert
  proxyDomain = ${?PROXY_DOMAIN}
  proxyUrlBase = ${?PROXY_URL_BASE}
}

app-service.enable-custom-app-check = ${?CUSTOM_APP_GROUP_PERMISSION_CHECK}
azure.coa-app-config.instrumentation-enabled = ${?COA_INSTRUMENTATION_ENABLED}
azure.coa-app-config.dockstore-base-url = ${?DOCKSTORE_BASE_URL}
azure.wds-app-config.instrumentation-enabled = ${?WDS_INSTRUMENTATION_ENABLED}

contentSecurityPolicy {
  frameAncestors.0 = ${?FRAME_ANCESTORS_0}
  frameAncestors.1 = ${?FRAME_ANCESTORS_1}
  frameAncestors.2 = ${?FRAME_ANCESTORS_2}
  frameAncestors.3 = ${?FRAME_ANCESTORS_3}
  frameAncestors.4 = ${?FRAME_ANCESTORS_4}
  frameAncestors.5 = ${?FRAME_ANCESTORS_5}
  frameAncestors.6 = ${?FRAME_ANCESTORS_6}
  frameAncestors.7 = ${?FRAME_ANCESTORS_7}
  frameAncestors.8 = ${?FRAME_ANCESTORS_8}
  frameAncestors.9 = ${?FRAME_ANCESTORS_9}
  frameAncestors.10 = ${?FRAME_ANCESTORS_10}
  frameAncestors.11 = ${?FRAME_ANCESTORS_11}
  frameAncestors.12 = ${?FRAME_ANCESTORS_12}
  frameAncestors.13 = ${?FRAME_ANCESTORS_13}
  frameAncestors.14 = ${?FRAME_ANCESTORS_14}
  frameAncestors.15 = ${?FRAME_ANCESTORS_15}
  frameAncestors.16 = ${?FRAME_ANCESTORS_16}
  frameAncestors.17 = ${?FRAME_ANCESTORS_17}
  frameAncestors.18 = ${?FRAME_ANCESTORS_18}
  frameAncestors.19 = ${?FRAME_ANCESTORS_19}
  frameAncestors.20 = ${?FRAME_ANCESTORS_20}
}

refererConfig {
  # Note automation tests pass a Referer but the host:port is not predictable from Jenkins.
  # Hence we include '*' for fiab and alpha environments.
  validHosts.0 = ${?VALID_HOSTS_0}
  validHosts.1 = ${?VALID_HOSTS_1}
  validHosts.2 = ${?VALID_HOSTS_2}
  validHosts.3 = ${?VALID_HOSTS_3}
  validHosts.4 = ${?VALID_HOSTS_4}
  validHosts.5 = ${?VALID_HOSTS_5}
  validHosts.6 = ${?VALID_HOSTS_6}
  validHosts.7 = ${?VALID_HOSTS_7}
  validHosts.8 = ${?VALID_HOSTS_8}
  validHosts.9 = ${?VALID_HOSTS_9}
  validHosts.10 = ${?VALID_HOSTS_10}
  validHosts.11 = ${?VALID_HOSTS_11}
  validHosts.12 = ${?VALID_HOSTS_12}
  validHosts.13 = ${?VALID_HOSTS_13}
  validHosts.14 = ${?VALID_HOSTS_14}
  validHosts.15 = ${?VALID_HOSTS_15}
  validHosts.16 = ${?VALID_HOSTS_16}
  validHosts.17 = ${?VALID_HOSTS_17}
  validHosts.18 = ${?VALID_HOSTS_18}
  validHosts.19 = ${?VALID_HOSTS_19}
  validHosts.20 = ${?VALID_HOSTS_20}
  enabled = ${?IS_REFERER_CONFIG_ENABLED}
  originStrict = ${?IS_ORIGIN_STRICT}
}

oidc {
  authority-endpoint = ${?AUTHORITY_ENDPOINT}
  #TODO: only defined in non-dev envs, no examples yet
  client-secret = ${?OIDC_CLIENT_SECRET}
  client-id = ${?AZURE_B2C_CLIENT_ID}
  legacy-google-client-id = ${?LEGACY_GOOGLE_CLIENT_ID}
}

liquibase {
  # Changes to liquibase.changelog value must also be reflected in liquibase.properties
  # See reference.conf for default liquibase.changelog value
  initWithLiquibase = ${?SHOULD_INIT_WITH_LIQUIBASE}
}

sam {
  server = ${?SAM_URL}
}

akka {
  loglevel = ${?AKKA_LOG_LEVEL}

  # Increased from the default of 3m to support long-lived websocket connections
  # TODO: Jupyter should be injecting periodic pings to keep websocket connections alive.
  # This doesn't seem to be happening in our case; need to figure out why. More info:
  # https://github.com/jupyter/notebook/issues/1474
  # https://github.com/jupyter/notebook/blob/master/notebook/base/zmqhandlers.py#L104
  http {
    client.connecting-timeout = 60 seconds
    client.idle-timeout = 1 hour
    parsing.max-to-strict-bytes = 128m
    server.parsing.max-content-length = 128m
    server.parsing.max-uri-length = 16k
    server.idle-timeout = 1 hour
    server.parsing.ignore-illegal-header-for = ["user-agent"]
    server.request-timeout = 60 seconds
    server.websocket.periodic-keep-alive-max-idle = 30 seconds
  }

  ssl-config {
    keyManager = {
      stores = [
        {
          type = "PKCS12"
          path = "/etc/leo-client.p12"
          path = ${?LEO_CLIENT_P12_PATH}
          password = ${?SSL_CONFIG_PASSWORD}
        }
      ]
    }
    trustManager = {
      stores = [
        {
          type = "PEM"
          path = "/etc/rootCA.pem"
          path = ${?ROOT_CA_PEM_PATH}
        },
        {
          # Default trust store
          path: ${?JAVA_HOME}/lib/security/cacerts
          password = "changeit"
        }
      ]
    }
  }
}

auth {
  providerConfig {
    # petTokenCacheEnabled is disabled in fiabs and alpha because it doesn't play nicely with gpalloc
    petTokenCacheEnabled = ${?IS_PET_TOKEN_CACHE_ENABLED}
    samServer = ${sam.server}
  }
}

azure {
  hail-batch-app-config {
    enabled = ${?HAIL_BATCH_APP_ENABLED}
  }

  coa-app-config {
    instrumentation-enabled = ${?COA_INSTRUMENTATION_ENABLED}
    database-enabled  = ${?COA_DATABASE_ENABLED}
  }

  wds-app-config {
    instrumentation-enabled = ${?WDS_INSTRUMENTATION_ENABLED}
    database-enabled  = ${?WDS_DATABASE_ENABLED}
  }

  wsm {
    uri = ${?WSM_URL}
  }

  tdr  {
    url = ${?DATA_REPO_URL}
  }

  pubsub-handler {
      runtime-defaults {
        acr-credential {
          username = ${?AZURE_PUBSUB_ACR_USER}
          password = ${?AZURE_PUBSUB_ACR_PASSWORD}
        }

        vm-credential {
          username = ${?AZURE_VM_USER}
          password = ${?AZURE_VM_PASSWORD}
        }
      }
  }

  app-registration {
    client-id = ${?LEO_MANAGED_APP_CLIENT_ID}
    client-secret = ${?LEO_MANAGED_APP_CLIENT_SECRET}
    managed-app-tenant-id = ${?LEO_MANAGED_APP_TENANT_ID}
  }
}

# opencensus-scala defines a bunch config in the library and reference.conf won't be able to overwrite it
opencensus-scala.trace.sampling-probability = ${?OPENCENSUS_SAMPLING_PROBABILITY}

leonardoExecutionMode = ${?LEO_EXECUTION_MODE}

clusterFiles {
  proxyServerCrt = ${?PROXY_SERVER_CRT_PATH}
  proxyServerKey = ${?PROXY_SERVER_KEY_PATH}
  proxyRootCaPem = ${?ROOT_CA_PEM_PATH}
  proxyRootCaKey = ${?ROOT_CA_KEY_PATH}
}

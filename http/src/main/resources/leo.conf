application {
  leoGoogleProject = ${?GOOGLE_PROJECT}
  leoServiceAccountJsonFile = "/etc/leonardo-account.json"
  leoServiceAccountJsonFile = ${?LEO_SA_JSON_PATH}
  leoServiceAccountEmail = ${?LEO_SVC_ACCT_EMAIL}
  leoUrlBase = ${?LEO_URL_BASE}
  environment = ${?APP_ENVIRONMENT}
}

app-service {
  enable-sas-app = ${?ENABLE_SAS_APP}
}

groups {
  subEmail = ${?GROUP_SUB_EMAIL}
  dataprocImageProjectGroupName = "dataproc-image-project-group"
  dataprocImageProjectGroupEmail = ${?DATAPROC_IMAGE_PROJECT_GROUP}
}

gce {
  runtimeDefaults {
    zone = ${?DEFAULT_ZONE}
  }
}

gke {
  galaxyApp {
    postgres.password = ${?GALAXY_POSTGRES_PASSWORD}
    orchUrl = ${?ORCH_URL}
    drsUrl = ${?DRS_URL}
  }
  allowedApp {
    sasContainerRegistry {
        sasRegistryUsername = ${?SAS_REGISTRY_USERNAME}
        sasRegistryPassword = ${?SAS_REGISTRY_PASSWORD}
    }
  }
}

pubsub {
  pubsubGoogleProject =  ${?GOOGLE_PROJECT}
  topicName = ${?TOPIC_NAME}

  non-leo-message-subscriber {
    subscription-name = ${?NON_LEO_SUBSCRIPTION_NAME}
  }
}

mysql {
  profile = "slick.jdbc.MySQLProfile$"
  batchSize = 2000
  db {
    # Changes to mysql.db.driver value must also be reflected in liquibase.properties
    driver = "com.mysql.cj.jdbc.Driver"
    # Changes to mysql.db.url value must also be reflected in liquibase.properties
    url = ${?SQL_URL}
    user = ${?DB_USER}
    password = ${?DB_PASSWORD}
    connectionTimeout = 5000
    numThreads = ${?NUM_DB_THREADS}
  }
}

proxy {
  # Should match the jupyter wildcard cert
  proxyDomain = ${?PROXY_DOMAIN}
  proxyUrlBase = ${?PROXY_URL_BASE}
}

app-service.enable-custom-app-check = ${?CUSTOM_APP_GROUP_PERMISSION_CHECK}
azure.wds-app-config.instrumentation-enabled = ${?WDS_INSTRUMENTATION_ENABLED}

contentSecurityPolicy {
  frameAncestors = ${?FRAME_ANCESTORS}
}

refererConfig {
  # Note automation tests pass a Referer but the host:port is not predictable from Jenkins.
  # Hence we include '*' for fiab and alpha environments.
  validHosts = ${?VALID_HOSTS}
  enabled = ${?IS_REFERER_CONFIG_ENABLED}
  originStrict = ${?IS_ORIGIN_STRICT}
}

oidc {
  authority-endpoint = ${?AUTHORITY_ENDPOINT}
  #TODO: only defined in non-dev envs, no examples yet
  client-secret = ${?OIDC_CLIENT_SECRET}
  client-id = ${?AZURE_B2C_CLIENT_ID}
  legacy-google-client-id = ${?LEGACY_GOOGLE_CLIENT_ID}
}

liquibase {
  # Changes to liquibase.changelog value must also be reflected in liquibase.properties
  # See reference.conf for default liquibase.changelog value
  initWithLiquibase = ${?SHOULD_INIT_WITH_LIQUIBASE}
}

sam {
  server = ${?SAM_URL}
}

akka {
  loglevel = ${?AKKA_LOG_LEVEL}

  # Increased from the default of 3m to support long-lived websocket connections
  # TODO: Jupyter should be injecting periodic pings to keep websocket connections alive.
  # This doesn't seem to be happening in our case; need to figure out why. More info:
  # https://github.com/jupyter/notebook/issues/1474
  # https://github.com/jupyter/notebook/blob/master/notebook/base/zmqhandlers.py#L104
  http {
    client.connecting-timeout = 60 seconds
    client.idle-timeout = 1 hour
    parsing.max-to-strict-bytes = 128m
    server.parsing.max-content-length = 128m
    server.parsing.max-uri-length = 16k
    server.idle-timeout = 1 hour
    server.parsing.ignore-illegal-header-for = ["user-agent"]
    server.request-timeout = 60 seconds
    server.websocket.periodic-keep-alive-max-idle = 30 seconds
  }

  ssl-config {
    keyManager = {
      stores = [
        {
          type = "PKCS12"
          path = "/etc/leo-client.p12"
          path = ${?LEO_CLIENT_P12_PATH}
          password = ${?SSL_CONFIG_PASSWORD}
        }
      ]
    }
    trustManager = {
      stores = [
        {
          type = "PEM"
          path = "/etc/rootCA.pem"
          path = ${?ROOT_CA_PEM_PATH}
        },
        {
          # Default trust store
          path: ${?JAVA_HOME}/lib/security/cacerts
          password = "changeit"
        }
      ]
    }
  }
}

auth {
  providerConfig {
    # petTokenCacheEnabled is disabled in fiabs and alpha because it doesn't play nicely with gpalloc
    petTokenCacheEnabled = ${?IS_PET_TOKEN_CACHE_ENABLED}
    samServer = ${sam.server}
  }
}

azure {
  hosting-mode-config{
      # If true, it is assumed that Leo is hosted on Azure and will use Azure managed identity for authentication.
      enabled = ${?AZURE_HOSTING_MODE_ENABLED}
      # valid values are AZURE (Azure Commercial), AZURE_US_GOVERNMENT and AZURE_CHINA
      azure-environment = ${?AZURE_HOSTING_ENVIRONMENT}
      managed-identity-auth-config{
        token-scope = ${?AZURE_MI_TOKEN_SCOPE}
        token-acquisition-timeout = ${?AZURE_MI_TOKEN_ACQUISITION_TIMEOUT}
      }
      publisher-config {
        topic-name = ${?AZURE_SB_TOPIC_NAME}
        connection-string = ${?AZURE_SB_CONNECTION_STRING}
        namespace = ${?AZURE_SB_NAMESPACE}
      }
      subscriber-config{
        topic-name = ${?AZURE_SB_TOPIC_NAME}
        subscription-name = ${?AZURE_SB_SUBSCRIPTION_NAME}
        connection-string = ${?AZURE_SB_CONNECTION_STRING}
        namespace = ${?AZURE_SB_NAMESPACE}
      }
  }

  hail-batch-app-config {
    enabled = ${?HAIL_BATCH_APP_ENABLED}
  }

  coa-app-config {
    instrumentation-enabled = ${?COA_INSTRUMENTATION_ENABLED}
    database-enabled  = ${?COA_DATABASE_ENABLED}
    dockstore-base-url = ${?DOCKSTORE_BASE_URL}
  }

  workflows-app-config {
    instrumentation-enabled = ${?WORKFLOWS_APP_INSTRUMENTATION_ENABLED}
    enabled = ${?WORKFLOWS_APP_ENABLED}
    dockstore-base-url = ${?DOCKSTORE_BASE_URL}
    ecm-base-uri = ${?ECM_URL}
    bard-base-uri = ${?BARD_URL}
    bard-enabled = ${?BARD_ENABLED}
  }

  cromwell-runner-app-config {
    instrumentation-enabled = ${?CROMWELL_RUNNER_APP_INSTRUMENTATION_ENABLED}
    enabled = ${?CROMWELL_RUNNER_APP_ENABLED}
    ecm-base-uri = ${?ECM_URL}
    bard-base-uri = ${?BARD_URL}
    bard-enabled = ${?BARD_ENABLED}
  }

  wds-app-config {
    instrumentation-enabled = ${?WDS_INSTRUMENTATION_ENABLED}
    database-enabled  = ${?WDS_DATABASE_ENABLED}
    environment = ${?APP_ENVIRONMENT}
    environment-base = ${?APP_ENVIRONMENT_BASE}
  }

  wsm {
    uri = ${?WSM_URL}
  }

  tdr  {
    url = ${?DATA_REPO_URL}
  }

  pubsub-handler {
      runtime-defaults {
        acr-credential {
          username = ${?AZURE_PUBSUB_ACR_USER}
          password = ${?AZURE_PUBSUB_ACR_PASSWORD}
        }

        vm-credential {
          username = ${?AZURE_VM_USER}
          password = ${?AZURE_VM_PASSWORD}
        }
      }
  }

  app-registration {
    client-id = ${?LEO_MANAGED_APP_CLIENT_ID}
    client-secret = ${?LEO_MANAGED_APP_CLIENT_SECRET}
    managed-app-tenant-id = ${?LEO_MANAGED_APP_TENANT_ID}
  }
}

# opencensus-scala defines a bunch config in the library and reference.conf won't be able to overwrite it
opencensus-scala.trace.sampling-probability = ${?OPENCENSUS_SAMPLING_PROBABILITY}

leonardoExecutionMode = ${?LEO_EXECUTION_MODE}

clusterFiles {
  proxyServerCrt = ${?PROXY_SERVER_CRT_PATH}
  proxyServerKey = ${?PROXY_SERVER_KEY_PATH}
  proxyRootCaPem = ${?ROOT_CA_PEM_PATH}
  proxyRootCaKey = ${?ROOT_CA_KEY_PATH}
}

drs {
  url = ${?DRS_URL}
}
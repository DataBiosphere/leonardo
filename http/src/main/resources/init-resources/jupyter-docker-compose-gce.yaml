# Note: we need to stay on docker-compose version 2 because version 3 doesn't support
# configuring memory options in container mode. See discussion in:
# https://docs.docker.com/compose/compose-file/#resources
# https://github.com/docker/compose/issues/4513
version: '2.4'
services:
  jupyter:
    container_name: "${JUPYTER_SERVER_NAME}"
    image: "${JUPYTER_DOCKER_IMAGE}"
    # Override entrypoint with a placeholder to keep the container running indefinitely.
    # The cluster init script will run some scripts as root and then start pyspark as
    # jupyter-user via docker exec.
    # -F will follow the log when the log is created.
    entrypoint: "tail -F ${NOTEBOOKS_DIR}/jupyter.log"
    ports:
      - "8000:8000"
    networks:
      - app_network
    volumes:
      # shared with welder
      - "/mnt/disks/work:${NOTEBOOKS_DIR}"
      - /mnt/disks/bucket:/usr/local/genomics:shared
    restart: always
    environment:
      GOOGLE_PROJECT: "${GOOGLE_PROJECT}"
      CLUSTER_NAME: "${RUNTIME_NAME}"
      RUNTIME_NAME: "${RUNTIME_NAME}"
      OWNER_EMAIL: "${OWNER_EMAIL}"
      PET_SA_EMAIL: "${PET_SA_EMAIL}"
      # Value must be the string "true" to enable.
      WELDER_ENABLED: "${WELDER_ENABLED}"
      NOTEBOOKS_DIR: "${NOTEBOOKS_DIR}"
      PIP_USER: "true"
      R_LIBS: "${NOTEBOOKS_DIR}/packages"
      # The next two lines aren't great. But they're for updating PYTHONPATH, PATH in older than (inclusive) us.gcr.io/broad-dsp-gcr-public/terra-jupyter-base:1.0.2
      # We should remove the two lines once we no longer support older images. In the meantime, we need to be careful updating Jupyter base images.
      PYTHONPATH: "/etc/jupyter/custom:/usr/lib/spark/python:${NOTEBOOKS_DIR}/packages"
      PATH: "/opt/conda/bin:/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:${NOTEBOOKS_DIR}/.local/bin:${NOTEBOOKS_DIR}/packages/bin"
    env_file:
      - /var/custom_env_vars.env
    # See https://docs.docker.com/engine/reference/run/#user-memory-constraints
    mem_limit: ${MEM_LIMIT}   # hard limit on memory consumption by the container
    memswap_limit: ${MEM_LIMIT}
    shm_size: ${SHM_SIZE}
networks:
  app_network:
    external: true

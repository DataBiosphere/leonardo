name: Consumer contract tests
# The purpose of this workflow is to validate the service level contract using Pact framework.
#
# More details on Contract Testing can be found in our handbook
#
# https://broadworkbench.atlassian.net/wiki/spaces/IRT/pages/2660368406/Getting+Started+with+Pact+Contract+Testing
#
# The workflow involves two parties: Leo as a consumer. Any provider (e.g. Sam) Leo consumes.
# Each party owns a set of tests (aka contract tests).
#
#   The consumer contract tests (aka consumer tests) are completely independent of
#   the provider contract tests (aka provider verification tests), and vice versa.
#
# Specifically
#   Leo runs consumer tests against mock Sam service. Upon success, publish a consumer pact to
#   Pact Broker https://pact-broker.dsp-eng-tools.broadinstitute.org/.
#
#   Pact Broker is the source of truth
#   to forge contractual obligations between consumer and provider.
#
#   Provider downloads relevant versions of consumer pacts from Pact Broker
#   and verify rhe provider tests against the pacts.
#
#   This workflow meets Pact Broker *Platinum* as described in https://docs.pact.io/pact_nirvana/step_6.
#   The can-i-deploy job has been added to this workflow to gate the merge of PRs into default branch.
#
#   This workflow is triggered when
#
#     Consumer makes a change that results in a new pact published to Pact Broker (will verify ONLY the changed pact and publish the verification results back to the broker)
#
# The Pact Broker is a 2-way street.
#   It can trigger provider verification upon changes in the content of consumer pacts
#
#   The provider can run verification tests against any consumers in deployed environments and publish statues to Pact Broker
#
#   Both consumer and the provider can gate deployment on availability/honoring of the published pact
#   (contract expectations) between the two parties.
#
# NOTE: The publish-contracts workflow will use the latest commit of the branch that triggers this workflow to publish the unique consumer contract version to Pact Broker.

on:
  push:
    branches:
      - QA-2056
    paths-ignore:
      - 'README.md'

jobs:
  init-github-context:
    runs-on: ubuntu-latest
    outputs:
      repo-branch: ${{ steps.extract-branch.outputs.repo-branch }}
      repo-version: ${{ steps.extract-branch.outputs.repo-version }}
      fork: ${{ steps.extract-branch.outputs.fork }}

    steps:
      - uses: actions/checkout@v3

      - name: Obtain branch properties
        id: extract-branch
        run: |
          FORK=false
          GITHUB_EVENT_NAME=${{ github.event_name }}
          if [[ "$GITHUB_EVENT_NAME" == "push" ]]; then
            GITHUB_REF=${{ github.ref }}
            GITHUB_SHA=${{ github.sha }}
          elif [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
            FORK=${{ github.event.pull_request.head.repo.fork }}
            GITHUB_REF=refs/heads/${{ github.head_ref }}
            GITHUB_SHA=${{ github.event.pull_request.head.sha }}
          elif [[ "$GITHUB_EVENT_NAME" == "merge_group" ]]; then
            GITHUB_REF=refs/heads/${{ github.head_ref }}
          else
            echo "Failed to extract branch information"
            exit 1
          fi
          echo "repo-branch=${GITHUB_REF/refs\/heads\//""}" >> $GITHUB_OUTPUT
          echo "repo-version=${GITHUB_SHA}" >> $GITHUB_OUTPUT
          echo "fork=${FORK}" >> $GITHUB_OUTPUT

      - name: Is PR triggered by forked repo?
        if: ${{ steps.extract-branch.outputs.fork == 'true' }}
        run: |
          echo "PR was triggered by forked repo"

      - name: Echo repo and branch information
        run: |
          echo "repo-owner=${{ github.repository_owner }}"
          echo "repo-name=${{ github.event.repository.name }}"
          echo "repo-branch=${{ steps.extract-branch.outputs.repo-branch }}"
          echo "repo-version=${{ steps.extract-branch.outputs.repo-version }}"

  leo-consumer-contract-tests:
    runs-on: ubuntu-latest
    needs: [init-github-context]
    outputs:
      pact-b64: ${{ steps.encode-pact.outputs.pact-b64 }}

    steps:
      - uses: actions/checkout@v3
      - name: Run consumer tests
        run: |
          docker run --rm -v $PWD:/working \
                          -v jar-cache:/root/.ivy \
                          -v jar-cache:/root/.ivy2 \
                          -w /working \
                          sbtscala/scala-sbt:openjdk-17.0.2_1.7.2_2.13.10 \
                          sbt "project pact4s" clean test

      - name: Output consumer contract as non-breaking base64 string
        id: encode-pact
        run: |
          cd pact4s
          NON_BREAKING_B64=$(cat target/pacts/leo-consumer-sam-provider.json | base64 -w 0)
          echo "pact-b64=${NON_BREAKING_B64}" >> $GITHUB_OUTPUT

  # Prevent untrusted sources from using PRs to publish contracts
  # since access to secrets is not allowed.
  publish-contracts:
    runs-on: ubuntu-latest
    if: ${{ needs.init-github-context.outputs.fork == 'false' }}
    needs: [init-github-context, leo-consumer-contract-tests]
    steps:
      - name: Dispatch to terra-github-workflows
        uses: broadinstitute/workflow-dispatch@v3
        with:
          workflow: publish-contracts
          repo: broadinstitute/terra-github-workflows
          ref: refs/heads/main
          token: ${{ secrets.BROADBOT_TOKEN }} # github token for access to kick off a job in the private repo
          inputs: '{ "pact-b64": "${{ needs.leo-consumer-contract-tests.outputs.pact-b64 }}", "repo-owner": "${{ github.repository_owner }}", "repo-name": "${{ github.event.repository.name }}", "repo-branch": "${{ needs.init-github-context.outputs.repo-branch }}" }'

  can-i-deploy:
    runs-on: ubuntu-latest
    if: ${{ needs.init-github-context.outputs.fork == 'false' }}
    needs: [ init-github-context, publish-contracts ]
    steps:
      - name: Dispatch to terra-github-workflows
        uses: broadinstitute/workflow-dispatch@v3
        with:
          workflow: can-i-deploy.yaml
          repo: broadinstitute/terra-github-workflows
          ref: refs/heads/QA-2056
          token: ${{ secrets.BROADBOT_TOKEN }} # github token for access to kick off a job in the private repo
          inputs: '{ "pacticipant": "leo-consumer", "version": "${{ needs.init-github-context.outputs.repo-version }}", "environment": "alpha" }'

  try-deploy:
    runs-on: ubuntu-latest
    if: ${{ needs.init-github-context.outputs.fork == 'false' }}
    needs: [ init-github-context, can-i-deploy ]
    steps:
      - name: Dispatch to terra-github-workflows
        uses: broadinstitute/workflow-dispatch@v3
        with:
          workflow: record-deployment.yaml
          repo: broadinstitute/terra-github-workflows
          ref: refs/heads/QA-2056
          token: ${{ secrets.BROADBOT_TOKEN }} # github token for access to kick off a job in the private repo
          inputs: '{ "pacticipant": "leo-consumer", "version": "${{ needs.init-github-context.outputs.repo-version }}", "environment": "alpha" }'

# This will automatically use the sbt version in project/build.properties
name: Custom Image Generation

#TODO: should only be `workflow_dispatch` eventually, after testing
on:
#TODO: REMOVE BEFORE MERGE
  push:
    branches: 
      - 'jc-image-action'
  workflow_dispatch:
    inputs:
      run-dataproc-override:
        description: 'Set this to `true` to force dataproc image generation script to run regardless of if there are changes to generation script.'
        required: false
        default: false
        type: boolean
      run-gce-override:
        description: 'Set this to `true` to force gce image generation script to run regardless of if there are changes to generation script.'
        required: false
        default: false
        type: boolean

env:
  GOOGLE_PROJECT: broad-dsp-gcr-public
  GOOGLE_CREDENTIAL_FILE_NAME: image-build-account.json
  REGION: us-central1
  ZONE: us-central1-a
  OUTPUT_BASE_NAME: custom-leo

#   inspect-changes:
#     runs-on: ubuntu-latest
#     outputs:
#       has-dataproc-changes: ${{ steps.filter.outputs.dataproc }}
#       has-gce-changes: ${{ steps.filter.outputs.gce }}

#     steps:
#     - uses: actions/checkout@v3
#     - uses: dorny/paths-filter@v2
#       id: filter
#       with:
#         base: 'develop'
#         filters: |
#           dataproc:
#             - 'jenkins/dataproc-custom-images/**' 
#           gce:
#             - 'jenkins/gce-custom-images/**' 

#     - name: display progress
#       run: | 
#         echo "finished inspecting the repo to determine which image generation scripts to run@@@@@@@@@@@"

jobs:
  run-image-generation-script-gce:
    runs-on: ubuntu-latest
    # needs: inspect-changes
    # if: github.event.inputs.run-gce-override == 'true' # needs.inspect-changes.outputs.has-gce-changes == 'true' && 
    env:
      GCE_IMAGE_BUCKET: gs://leo-gce-image-creation-logs
      DAISY_IMAGE: gcr.io/compute-image-tools/daisy:release
      #TODO: test
      TEST_NAME: "${OUTPUT_BASE_NAME}-gce-cos-image-${GITHUB_SHA:0:6}"

    steps:
    - uses: actions/checkout@v3

    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v0'
      with:
        # Centralized in dsp-tools-k8s; ask in #dsp-devops-champions for help troubleshooting
        workload_identity_provider: 'projects/1038484894585/locations/global/workloadIdentityPools/github-wi-pool/providers/github-wi-provider'
        service_account: 'image-build-account@broad-dsp-gcr-public.iam.gserviceaccount.com'

    - name: Create svc acct file
      run: 'echo "$GCP_DAISY_GCR_KEY" > "$GITHUB_WORKSPACE/jenkins/gce-custom-images/$GOOGLE_CREDENTIAL_FILE_NAME"'
      shell: bash
      env:
        GCP_DAISY_GCR_KEY: ${{secrets.GCP_DAISY_GCR_KEY}}

    - name: run script
      run: |
        gsutil ls $GCE_IMAGE_BUCKET || gsutil mb -p $GOOGLE_PROJECT -l $REGION $GCE_IMAGE_BUCKET
        docker pull $DAISY_IMAGE
        docker run -i --rm -v $GITHUB_WORKSPACE/jenkins/gce-custom-images:/gce-custom-images \
        $DAISY_IMAGE \
        -project $GOOGLE_PROJECT \
        -zone $ZONE \
        -oauth /gce-custom-images/$GOOGLE_CREDENTIAL_FILE_NAME \
        -gcs_path $GCE_IMAGE_BUCKET \
        -default_timeout 45m \
        -var:base_image $GCE_BASE_IMAGE \
        -var:output_image "${OUTPUT_BASE_NAME}-gce-cos-image-${GITHUB_SHA:0:6}" \
        -var:gce_images_dir /gce-custom-images \
        -var:installation_script_name prepare_gce_image.sh \
        /gce-custom-images/gce_image.wf.json
        docker stop daisy || true
        docker rm -f daisy || true
        
        # Daisy doesn't clean it up all so we remove the bucket manually
        gsutil rm -r $GCE_IMAGE_BUCKET
        
        # Make the image public
        gcloud beta compute images add-iam-policy-binding \
        projects/${GOOGLE_PROJECT}/global/images/${OUTPUT_BASE_NAME}-gce-cos-image-${GITHUB_SHA:0:6} \
        --member='allAuthenticatedUsers' \
        --role='roles/compute.imageUser'

  run-image-generate-script-dataproc:
    runs-on: ubuntu-latest
    # needs: inspect-changes
    # if: needs.inspect-changes.outputs.has-dataproc-changes == 'true' && github.event.inputs.run-dataproc-override == 'true'
    env:
      DATAPROC_IMAGE_VERSION: 2.0.51-debian10
      DATAPROC_IMAGE_VERSION_FORMATTED: 2-0-51-debian10
      DATAPROC_IMAGE_BUCKET: gs://leo-dataproc-image-creation-logs
      TEST_NAME: "${OUTPUT_BASE_NAME}-gce-cos-image-${GITHUB_SHA:0:6}"

    steps:
      - uses: actions/checkout@v3

      - name: test step 2
        run: echo "test 2"

      - name: Create svc acct file
        run: |
          echo "$GCP_DAISY_GCR_KEY" > "$GITHUB_WORKSPACE/jenkins/dataproc-custom-images/$GOOGLE_CREDENTIAL_FILE_NAME"
          echo 'echoing test name'
          echo "$TEST_NAME"
          echo 'catting'
          cat $GITHUB_WORKSPACE/jenkins/dataproc-custom-images/$GOOGLE_CREDENTIAL_FILE_NAME

      - name: Init submodule
        run: |
          git submodule sync
          git submodule update --init --recursive

      - name: Run image generation script
        run: |
          docker run --rm -v $GITHUB_WORKSPACE/jenkins/dataproc-custom-images:/work:ro gcr.io/google.com/cloudsdktool/cloud-sdk:266.0.0 bash -c "cd /work/dataproc-custom-images \
          && gcloud auth activate-service-account --key-file=/work/$GOOGLE_CREDENTIAL_FILE_NAME \
          && gcloud auth configure-docker --quiet \
          && gcloud config set dataproc/region us-central1 \
          && python generate_custom_image.py \
          --image-name "${OUTPUT_BASE_NAME}-image-dataproc-${DATAPROC_IMAGE_VERSION_FORMATTED}-${GITHUB_SHA:0:6}" \
          --dataproc-version "${DATAPROC_IMAGE_VERSION}" \
          --customization-script ../prepare-custom-leonardo-jupyter-dataproc-image.sh \
          --zone $ZONE \
          --gcs-bucket $DATAPROC_IMAGE_BUCKET \
          --project-id=$GOOGLE_PROJECT \
          --disk-size=120"

# TODO : investigate this from `create_dataproc_image.sh`
        ## application_default_credentials.json needs to be copied to jenkins/dataproc-custom-images/ which is mounted on Daisy container
        ## Credentials can be refreshed via 'gcloud auth application-default login' with project set to 'broad-dsde-dev' using
        ## Broad account. They are saved at '~/.config/gcloud/application_default_credentials.json' by default.

        #run script
        #make changes to reference.conf or have a nice output with instructions


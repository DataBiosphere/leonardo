# Example config file for leonardo.
# Anything commented out here will have have defaults specified or is not necessary to run leo.
# All values can be modified for your specific google environment, database, and security certificates

# Any variable beginning with 'TEMPLATE_VAR_*' will be replaced by the deploy.py
# script if it is present. You may modify these manually with minimal risk in most
# cases.

# Google Cloud dataproc configuration
dataproc {
  applicationName = "leonardo"
  dataprocDefaultRegion = "us-west1"  # the google region for your dataproc
  leoGoogleProject = "TEMPLATE_VAR_PROJECT"    # the name of the google project to use during cluster startup
                                               # *this is not the project the cluster will be created in.
  dataprocDockerImage = "gcr.io/TEMPLATE_VAR_DOCKER_PROJECT/leonardo-notebooks:TEMPLATE_VAR_DOCKER_TAG"
  clusterUrlBase = "https://TEMPLATE_VAR_DOMAIN/proxy/" # the base url to access your cluster
  jupyterServerName = "jupyter-server"
}

clusterDefaults {
    numberOfWorkers = 0            # Standard, non-preemptible workers; Can't be 1
    masterMachineType = "n1-standard-2"
    masterDiskSize = 200           # Minimum is 100
    workerMachineType = "n1-standard-2"
    workerDiskSize = 100           # Minimum is 100
    numberOfWorkerLocalSSDs = 0    # Can be 0-8
    numberOfPreemptibleWorkers = 0
}

# Database connection information
mysql {
  db {
    url = "jdbc:mysql://sqlproxy:3306/leonardo?requireSSL=false&useSSL=false&rewriteBatchedStatements=true&nullNamePatternMatchesAll=true"
    user = "root"
    password = "TEMPLATE_VAR_DBPASS"
  }
}

# To use the swagger page, supply a service account id and realm
swagger {
    googleClientId = "TEMPLATE_VAR_OAUTH2_CLIENT_ID"
    realm = ""
}

# Secure, 2-way communication between leo and jupyter
# See https://github.com/DataBiosphere/leonardo/CERTIFICATES.md for info on setting up the certificates

# Keys and certificate authorities for cluster
clusterFiles {
  configFolderPath = "/etc/"
  jupyterServerCrt = "jupyter-server.crt"
  jupyterServerKey = "jupyter-server.key"
  jupyterRootCaPem = "rootCA.pem"
  jupyterRootCaKey = "rootCA.key"
}

# Jupyter proxy server configuration
proxy {
  # Should match the jupyter wildcard cert specified in command above
  jupyterDomain = ".TEMPLATE_VAR_DOMAIN"
}


akka {
  loglevel = INFO
  http {
    server.idle-timeout = 1 h
    client.idle-timeout = 1 h
    server.request-timeout = 60 s
  }

  #Add your ssl config info below
  ssl-config {
    # Key store with leo client credentials
    keyManager = {
      stores = [
        {
          type = "PKCS12"
          path = "/etc/leo-client.p12"
          password = "leokeystorepassword"
        }
      ]
    }
    trustManager = {
      stores = [
        # Certificate store that recognizes the jupyter certificate
        {
          type = "PEM"
          path = "/etc/rootCA.pem"
        },
        # Default trust store - no need to modify
        {
          path: ${java.home}/lib/security/cacerts
          password = "changeit"
        }
      ]
    }
  }
}

auth {
  # To use your own provider implementation, subclass org.broadinstitute.dsde.workbench.leonardo.model.LeoAuthProvider and provide the class name here
  providerClass = "org.broadinstitute.dsde.workbench.leonardo.auth.WhitelistAuthProvider"  # A default auth provider
  whitelistProviderConfig {
    whitelist = []
  }
  providerConfig {
    whitelist = []
  }
}

sam {
  server = "http://localhost:9000"
}


# Implement and specify a class that will provide appropriate service accounts
serviceAccounts {
  # To implement your own service account provisioning, subclass org.broadinstitute.dsde.workbench.leonardo.model.ServiceAccountProvider
  # and specify your concrete class here
  providerConfig { # Do not remove config, even if empty
    leoServiceAccountEmail = "TEMPLATE_VAR_SERVICE_ACCOUNT"
    leoServiceAccountPemFile = "/etc/leonardo-account.pem"
  }
}
